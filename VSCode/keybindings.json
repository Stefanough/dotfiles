[
  //////////////////////////////////////////////////////////////////////////////
  // BEGIN DEBUG KEYBINDINGS
  //
  {
    // toggle breakpoint
    "key": "ctrl+shift+b",
    "command": "editor.debug.action.toggleBreakpoint",
    "when": "editorTextFocus"
  },
  {
    // toggle breakpoint
    "key": "f9",
    "command": "-editor.debug.action.toggleBreakpoint",
    "when": "editorTextFocus"
  },
  {
    // step into
    "key": "ctrl+shift+s",
    "command": "workbench.action.debug.stepInto",
    "when": "inDebugMode"
  },
  {
    // step over
    "key": "ctrl+shift+n",
    "command": "workbench.action.debug.stepOver",
    "when": "inDebugMode"
  },
  //
  // END DEBUG KEYBINDINGS
  //////////////////////////////////////////////////////////////////////////////

  {
    "key": "cmd+k cmd+u",
    "command": "git.revertSelectedRanges",
    "when": "isInDiffEditor"
  },
  {
    "key": "cmd+k cmd+r",
    "command": "-git.revertSelectedRanges",
    "when": "isInDiffEditor"
  },

  //////////////////////////////////////////////////////////////////////////////
  // BEGIN NAVIGATION BETWEEN EDITORS IN A SINGLE GROUP
  //
  {
    // Navigate to next editor including all editors in all editor groups
    "key": "ctrl+tab",
    "command": "workbench.action.nextEditor"
  },
  {
    // Navigate to prev editor including all editors in all editor groups
    "key": "ctrl+shift+tab",
    "command": "workbench.action.previousEditorInGroup"
  },
  {
    // Navigate to next editor in current editor group
    "key": "ctrl+l",
    "command": "workbench.action.nextEditorInGroup"
  },
  {
    // Navigate to prev editor in current editor group
    "key": "ctrl+h",
    "command": "workbench.action.previousEditorInGroup",
    "when": "editorTextFocus && vim.active && vim.mode != 'Insert' && vim.mode != 'CommandlineInProgress' && vim.mode != 'SearchInProgressMode' || imagePreviewFocus == true"
  },
  //
  // END NAVIGATION BETWEEN EDITORS IN A SINGLE GROUP
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // BEGIN NAVIGATION BETWEEN EDITOR GROUPS
  //
  {
    // Navigate to editor group right of the current editor group. Will cycle
    "key": "ctrl+space l",
    "command": "workbench.action.navigateRight"
  },
  {
    // Navigate to editor group left of the current editor group. Will cycle
    "key": "ctrl+space h",
    "command": "workbench.action.navigateLeft",
    "when": "vim.mode == 'Normal'"
  },
  {
    // Navigate to sidebar when the last editor group has focus
    "key": "ctrl+space l",
    "command": "workbench.action.focusSideBar",
    "when": "activeEditorGroupLast && sideBarVisible"
  },
  {
    // Navigate to sidebar when the first editor group has focus
    "key": "ctrl+space h",
    "command": "workbench.action.focusSideBar",
    "when": "activeEditorGroupIndex == 1 && sideBarVisible"
  },
  {
    // Navigate to first editor group when sidebar has focus
    "key": "ctrl+space l",
    "command": "workbench.action.focusFirstEditorGroup",
    "when": "sideBarFocus"
  },
  {
    // Navigate to last editor group when sidebar has focus
    "key": "ctrl+space h",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "sideBarFocus"
  },
  //
  // END NAVIGATION BETWEEN EDITOR GROUPS
  //////////////////////////////////////////////////////////////////////////////
  {
    "key": "cmd+n",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus"
  },
  {
    "key": "cmd+shift+n",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus"
  },
  {
    "key": "ctrl+space k",
    "command": "workbench.action.focusAboveGroup"
  },
  {
    "key": "ctrl+space j",
    "command": "workbench.action.navigateDown"
  },
  {
    "key": "ctrl+t",
    "command": "search.action.openNewEditor",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+space z",
    "command": "workbench.action.toggleEditorWidths"
  },
  {
    // Accept currently highlighted selection from auto suggest window and
    // append a "." to the end of the accepted selection. Do not trigger this
    // keybinding while in debug mode.
    "key": ".",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "acceptSelectedSuggestion",
        {
          "command": "type",
          "args": {
            "text": "."
          }
        }
      ]
    },
    "when": "editorLangId == javascript && !inDebugMode && editorTextFocus && suggestWidgetVisible || editorLangId == python && !inDebugMode && editorTextFocus && suggestWidgetVisible"
  },
  // {
  //   Accept currently highlighted selection from auto suggest window and exit
  //   insert mode. Do not trigget this keybinding while in debug mode.
  //   "key": "ctrl+[",
  //   "command": "extension.multiCommand.execute",
  //   "args": {
  //     "sequence": [
  //       "acceptSelectedSuggestion",
  //       "extension.vim_escape"
  //     ]
  //   },
  //   "when": "editorLangId == typescript && !inDebugMode && editorTextFocus && suggestWidgetVisible || javascript && !inDebugMode && editorTextFocus && suggestWidgetVisible || editorLangId == python && !inDebugMode && editorTextFocus && suggestWidgetVisible"
  // },
  {
    "key": ",",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "acceptSelectedSuggestion",
        {
          "command": "type",
          "args": {
            "text": ","
          }
        }
      ]
    },
    "when": "editorTextFocus && suggestWidgetVisible && editorLangId == typescriptreact"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpen",
    "when": "editorTextFocus && !suggestWidgetVisible && vim.active && vim.mode != 'CommandlineInProgress' && vim.mode != 'SearchInProgressMode' || imagePreviewFocus == true"
  },
  {
    "key": "ctrl+[",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+[",
    "command": "closeFindWidget",
    "when": "findInputFocussed"
  },
  {
    "key": "ctrl+shift+l",
    "command": "editor.action.openLink",
    "when": "editorTextFocus"
  },
  {
    // Stage hunk
    "key": "\\ s",
    "command": "git.Stage",
    "when": "editorTextFocus && vim.mode != 'CommandlineInProgress' && vim.mode != 'SearchInProgressMode'"
  },
  {
    "key": "ctrl+cmd+0",
    "command": "zoombar-vscode.resetZoom"
  },
  {
    "key": "shift+cmd+g",
    "command": "workbench.view.scm",
    "when": "workbench.scm.active"
  },
  {
    "key": "ctrl+shift+g",
    "command": "-workbench.view.scm",
    "when": "workbench.scm.active"
  },
  {
    // Insert link at selected text inside markdown files.
    "key": "ctrl+shift+l",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "[${TM_SELECTED_TEXT}]($0)"
    },
    "when": "editorHasSelection && editorLangId == markdown "
  }
]
